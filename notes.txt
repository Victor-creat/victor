//javascript

//Ternary Operator
declare a variable and assign it a value
declare another variable and assign using operators(>=, <=, ===, >, <) using ternary operator (if statement) ?"" (else statements): ""
console.log(second variable declared)


//declare a variable and assign it a boolean value
//declare another variable = first declared variable and assign using operators(>=, <=, ===, >, <) using ternary operator (if statement) ?"" (else statements): ""
console.log(second variable declared)

//If statements
operators 
>=
<=
===
&&
||
!=

declare a variable and assign it a value
use an if statement
if(the condition and add operators){
    console.log();
} 
else if(condtion and add operators){
    console.log();
}
else(condition and add operators){
    console.log();
}
//Switch statements
let variable = data type
declare a variable and assign it a value
use switch(variable)
case : ""
console.log();
break;
use a default
default:
console.log();

operators(+ = - / % * === !== >= <== > <)

//For Each
let array = ["", "", "", ""];
array.forEach(callback or name of the function)

function name (element,index,array){
    array[index] = element.method charAt(index);
    array[index]= element operator number;
    array[index]= method(element, number);
    array[index] = element.method1(number).method2() + element.method3(number)
}
 OR
function  name (element){
    console.log(element);
}
//console.log(parameter in the function --brackets)

//map()
accepts a callback and applies that function to each element of an array, then returns a new array
let array = ["", "", "", ""];
let second array = array.map(name of the function)

 function name(element){
    return method (element, number)
    return (element) . method(toUpperCase);
 }
 console.log(second array);

 //filter
 creates a new array by filtering out elements
 let array = ["", "", "", ""];
 let second array = array.filter(name of the function)
 

 function name(element){
    return element operator number operator  number;
 }
 console.log(second array);

 //reduce
 reduce the elements of an array to a single value
 let array = ["", "", "", ""];
 let second array = array.reduce(name of the function)
 

 function name(add, element){
    return add operator element;
 }
 console.log(second array);

//callback function
a function that is passed as a argument to another function
function 1(callback){
    console.log("");
    callback()
}
function 2(){
    console.log("");
}
1(2);

function sum(callback, x, y){
    let result = x+y;
    callback(result)
}
function 2(result){
    console.log("");
}
sum(1, number1, number2);


function 1(callback){

    setTimeout(() => {
      console.log("");
      callback();
    }, 3000);
}
function 2(callback){
    setTimeout(() => {
        console.log("");
        callback();
    }, 2500);
}
function 3(callback){
    setTimeout(() => {
        console.log("");
        callback();
    }, 500);
}

//callback hell
1(() => {
    2(() => {
        3(() => console.log(""));
    });
    });


 //function expression function(){

 }
 a way to define a function as a value or variables

const variable = function(){
    console.log("");
}
variable();

//function as an argument
variable(function(){
    console.log("");
}, );

//map method
const array = ["", "", "", "", "", ""];
const array2 = array.map(function(element){
    return method(element, number)
});

console.log(array2);

//filter
const array = ["", "", "", "", "", ""];
const array2 = array.filter(function(element){
    return element operator number operator number;
});

console.log(array2);

//reduce
const array = ["", "", "", "", "", ""];
const array2 = array.reduce(function(add, element){
   return add + element;
});

console.log(array2);



//Arrow function
= () =>
const variable = () => 
console.log("");
variable();

const variable = (name, age) =>{
console.log(` ${name} `);
console.log(`${age} `);
}
variable("", );

//map
const array = ["", "", "", "", "", ""]
const array2 = array.map((element) => method.(element, number));

console.log(array2);

//filter
const array = ["", "", "", "", "", ""]
const array2 = array.filter((element) => element operator number operator number);

console.log(array2);

//reduce
const array = ["", "", "", "", "", ""];
const array2 = array.reduce((add, element) => add + element);
console.log(array2);

//arrays 
let array = ["", "", "", "", "", ""];

console.log(array);
console.log(array[index]);

//length property
let numOfArray = array.length;
console.log(numOfArray);

//index property
let index = array.indexOf("");
console.log(index);

//methods .push() .pop() .shift() .unshift() 
.sort()
.sort.reverse();

//loop  
for(let i = 0; i < array.length; i++){
    console.log(array[i]);
}
for( let array of arrays){
    console.log(array);
}
//objects
A collection of related properties and methods 
object = {key:value,
function()}

const person = {
    firstName: "",
    lastName: "",
    age: ,
    isEmployed: ,
    sayHello: () => {console.log("Hi! I am Spongebob!")},
}
const person2 = {
    firstName: "",
    lastName: "",
    age: ,
    isEmployed: ,
    sayHello: function(){console.log("Hey! I am patrick")},
}

console.log(person.firstName);
console.log(person.lastName);
console.log(person.age);
console.log(person.isEmployed)
person.sayHello();
person2.sayHello();

console.log(person2.firstName);
console.log(person2.lastName);
console.log(person2.age);
console.log(person2.isEmployed)

//JSON
JSON.stringify() = converts a JS Object to a JSON string
JSON.parse() = converts a JSON string to a JS Object

const array = `["", "", "", "", ""]`;
const array2 = `{"":, "":, "":, "":, ""}`;

const parsedData = JSON.parse(array);
console.log(parsedData)


//fetch

fetch(".json")
.then(response => response.json())
.then(value => console.log(value))
.catch(error => console.error(error));

//string methods = allows one to manipulate and work with textContent
let variable = "";
let variable2 = variable.startsWith("");
let variable2 = variable.endsWith("");
let variable2 = variable.includes("");

variable.charAt();
variable.indexOf();
variable = variable.trim();
variable = variable.toLowerCase();
variable = variable.toUpperCase();
variable = variable.repeat();

console.log(variable2);
console.log(variable);
console.log(variable.lastIndexOf(""));
console.log(variable.length);


//Asynchronous code
Allows multiple operations to be performed concurrently without waiting
Doesnt block the execution flow and allows the program to continue
function func1(callback){
setTimeout(() => {console.log(""); 
    callback()}, 5000);
}

function func2(){
console.log("");
console.log("");
console.log("");
}
func1(func2);

//Async/Await
Async= makes a function return a promise
Await = makes an async function wait for a promise
//Allows you to write asynchronous code in a synchronous manner
//Async doesnt have resolve or reject parameters
Everything after await is placed in a event queue

function 1(){
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const 1 = true;
            if(1){
                resolve("");
            }
            else{
                reject("");
            }
        }, 1500);
    });
}
function 2(){
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const 2 = true;
            if(2){
                resolve("");
            }
            else{
                reject("");
            }
        }, 1500);
    });
}
function 3(){
    return new Promise ((resolve, reject) => {
        setTimeout(() => {
            const 3 = true;
            if(3){
                resolve ("");
            }
            else{
                reject("")
            }
        }, 1500);
    });
}
async function 4(){

    try{
    const Result1 = await 1();
    console.log(Result1);

    const Result2= await 2();
    console.log(Result2);

    const Result3 = await 3();
    console.log(Result3);

    console.log("")
}
catch(error){
    console.error(error);
}
}
4()


//promise
An object that manages asynchronous operations
wrap a promise object around synchronous code
"I promise to return a Value"
new Promise((resolve))
function 1(){
   return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("");
    }, 3000);
});
}
function 2(){
    return new Promise ((resolve, reject) => {
    setTimeout(() => {
        resolve("");
    }, 2500);
});
}
function 3(){
    return new Promise ((resolve, reject) => {
    setTimeout(() => {
        resolve("");
    }, 500);
});
}

1().then(value => {console.log(value); return 2()})
.then(value => {console.log(value); return 3()})
.then(value => {console.log(value); console.log("")});



function walkDog(){
   return new Promise((resolve, reject) => {
    setTimeout(() => {

        const dogWalked = true;

        if(dogWalked){
            resolve("You walked the dog");
        }
        else{
            reject("You didnt walk the dog");
        }
     
    }, 3000);
});
}
function cleanKitchen(){
    return new Promise ((resolve, reject) => {
    setTimeout(() => {

        const cleanedKitchen = true;

        if(cleanedKitchen){
            resolve("You cleaned the kitchen");
        }
        else{
            reject("You didnt walk the dog");
        }
       
    }, 2500);
});
}
function takeTrash(){
    return new Promise ((resolve, reject) => {
    setTimeout(() => {

        const takeOutTrash = false;

        if(takeOutTrash){
        resolve("You took out the trash");
    }
    else{
        reject("You didnt take out trash");
    }

    }, 500);
});
}

walkDog().then(value => {console.log(value); return cleanKitchen()})
.then(value => {console.log(value); return takeTrash()})
.then(value => {console.log(value); console.log("You finished all the chores!")});

//super keyword
keyword is used in classes to call the constructor or access the properties and methods of a parent (superclass)
this = this.object
super = the parent
class Animal{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
}
class Rabbit extends Animal{
    constructor(name, age, runSpeed){
        super(name,age);
        this.runSpeed = runSpeed;
    }
}
class Fish extends Animal{
    constructor(name, age, swimSpeed){
        super(name,age);
        this.swimSpeed = swimSpeed;
    }
}
class Hawk extends Animal{
    constructor(name, age, flySpeed){
        super(name,age);
        this.runSpeed = flySpeed;
    }
}
const rabbit = new Rabbit("rabbit", 1, 25);
const fish = new Fish("fish", 2, 12);
const hawk = new Hawk("hawk", 2, 23);
console.log(rabbit.name);
console.log(rabbit.age);
console.log(rabbit.runSpeed);


class Animal{
    constructor(name, age){
        this.name = name;
        this.age = age;
    }
    move(speed){
        console.log(`The ${this.name} moves at a speed of ${speed}`);
    }
}
class Rabbit extends Animal{
    constructor(name, age, runSpeed){
        super(name,age);
        this.runSpeed = runSpeed;
    }
    run(){
        console.log(`This ${this.name} can run`);
        super.move(this.runSpeed);
    }
}
class Fish extends Animal{
    constructor(name, age, swimSpeed){
        super(name,age);
        this.swimSpeed = swimSpeed;
    }
    swim(){
        console.log(`This ${this.name} can swim`);
        super.move(this.swimSpeed);
    }
}
class Hawk extends Animal{
    constructor(name, age, flySpeed){
        super(name,age);
        this.flySpeed = flySpeed;
    }
    fly(){
        console.log(`This ${this.name} can fly`);
        super.move(this.flySpeed);
    }
}
const rabbit = new Rabbit("rabbit", 1, 25);
const fish = new Fish("fish", 2, 12);
const hawk = new Hawk("hawk", 2, 23);


rabbit.run();
fish.swim();
hawk.fly();

//classes
class Products{
    constructor(name,price){
        this.name = name;
        this.price = price;
    }
    displayProduct(){
        console.log(`Product: ${this.name}`);
        console.log(`Price: $${this.price.toFixed(2)}`);
    }
    calculateTotal(salesTax){
        return this.price + (this.price * salesTax);
    }
}
const salesTax = 0.05;

const product1 = new Products("Shirt", 19.99);
const product2 = new Products("Pants", 22.20);
const product3 = new Products("Underwear", 100.00);

product2.displayProduct();
const total = product2.calculateTotal(salesTax);
console.log(`Total price (with tax): $${total.toFixed(2)}`);


//constructors
special method for defining the properties and methods of objects
function Car(make, model, year, color){
    this.make = make,
    this.model = model,
    this.year = year,
    this.color = color
    this.drive = function(){console.log(`You drive the ${this.model}`)}
}
const car1 = new Car("Ferrari", "Bugatti", 2024, "red");
const car2 = new Car("Mustang", "BMW", 2025, "green");
const car3 = new Car("Dodge", "Charger", 2026, "violet");

console.log(car1.make);
console.log(car1.model);
console.log(car1.year);
console.log(car1.color);

console.log(car2.make);
console.log(car2.model);
console.log(car2.year);
console.log(car2.color);

console.log(car3.make);
console.log(car3.model);
console.log(car3.year);
console.log(car3.color);

car1.drive();
car2.drive();
car3.drive();

//static = keyword that defines properties or methods that belong to a class itself rather than the objects created from the class(class owns anything static not the objects)
class MathUtil{
    static PI = 3.14159;

    static getDiameter(radius){
return radius * 2;
    }
    static getCircumference(radius){
        return 2 * this.PI*radius;
            }
            static getArea(radius){
                return this.PI * radius * radius;
}
}
console.log(MathUtil.PI);
console.log(MathUtil.getDiameter(10));
console.log(MathUtil.getCircumference(15));
console.log(MathUtil.getArea(10));

class User{
    static userCount = 0;

    constructor(username){
      this.username = username;
      User.userCount++;
    }
    static getUserCount(){
        console.log(`There are ${User.userCount}users online`);

    }
    sayHello(){
        console.log(`Hello, my username is ${this.username}`);
    }
}
const user1 = new User("Spongebob");
const user2 = new User("Patrick");
const user3 = new User("Sandy");

user1.sayHello();
user2.sayHello();
user3.sayHello();

console.log(user1.username);
console.log(user2.username);
console.log(user3.username);
console.log(User.userCount);
User.getUserCount();

//inheritance 
allows a new class to inherit prperties and methods from an existing class(parent child)
class Animal{
    alive = true;

    eat(){
        console.log(`This ${this.name} is eating`);
    }
    sleep(){
        console.log(`This ${this.name} is sleeping`);
    }
}
class Rabbit extends Animal{
    name = "rabbit";
}
class Fish extends Animal{
    name = "fish";
}
class Hawk extends Animal{
    name = "hawk";
}
const rabbit = new Rabbit();
const fish = new Fish();
const hawk = new Hawk();


console.log(hawk.alive);
hawk.eat();
hawk.sleep();

class Animal{
    alive = true;

    eat(){
        console.log(`This ${this.name} is eating`);
    }
    sleep(){
        console.log(`This ${this.name} is sleeping`);
    }
}
class Rabbit extends Animal{
    name = "rabbit";
    run(){
        console.log(`This ${this.name} is running`);
    }
}
class Fish extends Animal{
    name = "fish";
    swim(){
        console.log(`This ${this.name} is swimming`);
    }
}
class Hawk extends Animal{
    name = "hawk";
    fly(){
        console.log(`This ${this.name} is flying`);
    }
}
const rabbit = new Rabbit();
const fish = new Fish();
const hawk = new Hawk();


console.log(fish.alive);
fish.eat();
fish.sleep();
fish.swim();

//this 
reference to an object where THIS is used
the object depends on its immediate context
  const person1 = {
    name: "Spongebob",
    favoriteFood: "hamburgers",
    sayHello: function(){console.log(`Hi! I am ${this.name}`)},
     eat: function(){console.log(`${this.name} is eatibg ${this.favoriteFood}`)}
}
const person2 = {
    name: "Patrick",
    favoriteFood: "Popcorns",
    sayHello: function(){console.log(`Hi! I am ${this.name}`)},
     eat: function(){console.log(`${this.name} is eating ${this.favoriteFood}`)}
}

person1.eat();
person2.eat();


//closure 
A function defined inside of another function
the inner function has access to the variables
Allow for private variables and state maintenance
function outer(){

    let message = "Hello";

    function inner(){
    console.log(message);
    }
    inner();
}
outer();

function createCounter(){
    let count = 0;

function increment(){
    count++;
    console.log(`Count increased to ${count}`);
}

function getCount(){
    return count;
}

return {increment, getCount};
}

const counter = createCounter();

counter.increment();
counter.increment();
counter.increment();

console.log(`The current count is ${counter.getCount()}`);

function createGame(){

    let score = 0;

    function increaseScore(points){
        score += points;
        console.log(`${points}pts`);
    }
    function decreaseScore(points){
        score -= points;
        console.log(`${points}pts`);
    }
    function getScore(){
        return score;
    }

     return {increaseScore, decreaseScore, getScore};

   
}

const game = createGame();


game.increaseScore(5);
game.decreaseScore(6);
game.increaseScore(3);

console.log(`The final score is ${game.getScore()}pts`);

//rest parameters
(...rest) allow a function work with a variable and a number of arguments by bundling them into an array
//spread= expands an array into separate elements
rest= bundles separate elements into an array
function openFridge(...foods){
console.log(foods);
}


const food1 = "pizza";
const food2 = "hamburger";
const food3 = "hotdog";
const food4 = "chips";
const food5 = "sushi";

openFridge(food1, food2, food3, food4, food5);


function openFridge(...foods){
console.log(...foods);
}


const food1 = "pizza";
const food2 = "hamburger";
const food3 = "hotdog";
const food4 = "chips";
const food5 = "sushi";

openFridge(food1, food2, food3, food4, food5);

function sum(...numbers){
    let result = 0;
    for(let number of numbers){
        result += number;
    }
    return result;
}
const total = sum(1, 2);

console.log(`Your total is ${total}`);

function sum(...numbers){
    let result = 0;
    for(let number of numbers){
        result += number;
    }
    return result;
}
function getAverage(...numbers){
    let result = 0;
    for(let number of numbers){
        result += number;
    }
    return result / numbers.length;
}

const total = getAverage(75, 100, 85, 90, 50);

console.log(total);

//spread operator
...allows an iterable such as an array or string to be expanded into separate elements(unpack the elements)
let numbers = [1, 2, 3, 4, 5];

let maximum = Math.max(...numbers)
console.log(maximum);

let numbers = [1, 2, 3, 4, 5];

let minimum = Math.min(...numbers)
console.log(minimum);

let username = "Bro Code";
let letters = [...username];

console.log(letters);



let username = "Bro Code";
let letters = [...username].join("-");

console.log(letters);


let fruits = ["apple", "orange", "banana"];
let vegetables = ["carrots", "celery", "potatoes"];
let foods = [...fruits, ...vegetables, "eggs", "milk"]

console.log(foods);

//2D arrays
multi-dimensional array that stores a matrix of data in rows and columns
const matrix = [[1, 2, 3], 
               [4, 5, 6], 
                [7, 8, 9]];
for(let row of matrix){
    console.log(row);
}

const matrix = [[1, 2, 3], 
               [4, 5, 6], 
                [7, 8, 9]];

matrix[0][0] = 'x';
matrix[0][1] = 'o';
matrix[0][2] = 'x';

matrix[1][0]= 'o';
matrix[1][1] ='x';
matrix[1][2] ='o';

matrix[2][0]= 'x';
matrix[2][1] ='o';
matrix[2][2] ='x';

for(let row of matrix){
    const rowString = row.join(' ');
    console.log(rowString);
}

//destructuring
extract values from arrays and objects them assign them to variables in a convenient way
[] to perform array destructuring
{} to perform object destructuring


let a = 1;
let b = 2;

[a,b] = [b,a];

console.log(a);
console.log(b);

const colors = ["red", "green", "blue", "black", "white"];

[colors[0], colors[4]] = [colors[4], colors[0]];

console.log(colors);

const colors = ["red", "green", "blue", "black", "white"];

const[firstColor, secondColor, thirdColor, ...extraColors] = colors;

console.log(firstColor);
console.log(secondColor);
console.log(thirdColor);
console.log(extraColors);

const person1 = {
    firstName: "Spongebob",
    lastName: "Squarepants",
    age: 30,
    job: "Fry Cook",
}
const person2 = {
    firstName: "Patrick",
    lastName: "Star",
    age: 30,
}

const {firstName, lastName, age, job= "unemployed"} = person2;

console.log(firstName);
console.log(lastName);
console.log(age);
console.log(job);

function displayPerson({firstName, lastName, age, job="unemployed"}){
  console.log(`name: ${firstName} ${lastName}`);
  console.log(`age: ${age}`);
  console.log(`job: ${job}`);
}
const person1 = {
    firstName: "Spongebob",
    lastName: "Squarepants",
    age: 30,
    job: "Fry Cook",
}
const person2 = {
    firstName: "Patrick",
    lastName: "Star",
    age: 30,
}
displayPerson(person2);

//nested objects 
objects inside other objects
property accessor is used twice . .
const person = {
    fullName: "Spongebob Squarepants",
    age: 30,
    isStudent: true,
    hobbies: ["Karate", "Jellyfishing", "cooking"],
    address: {
        street: "124 Conch St.",
        city: "Bikini Bottom",
        country: "Int. water"
    }
}
console.log(person.fullName);
console.log(person.age);
console.log(person.isStudent);
console.log(person.hobbies);
console.log(person.address);

const person = {
    fullName: "Spongebob Squarepants",
    age: 30,
    isStudent: true,
    hobbies: ["Karate", "Jellyfishing", "cooking"],
    address: {
        street: "124 Conch St.",
        city: "Bikini Bottom",
        country: "Int. water"
    }
}
for (const property in person.address){
    console.log(person.address[property]);
}

class Person{
    constructor(name, age, ...address){
        this.name = name;
        this.age = age;
        this.address = new Address(...address);
    }
}


class Address{
    constructor(street, city, country){
        this.street = street;
        this.city = city;
        this.country = country;
    }
}
const person1 = new Person("Spongebob", 30, "124 Conch St.", 
                                            "Bikini Bottom", 
                                            "Int Waters");
const person2 = new Person("Patrick", 37, "128 Conch St.", 
                                          "Bikini Bottom", 
                                            "Int Waters");
const person3 = new Person("Squidward", 45, "126 Conch St.", 
                                                "Bikini Bottom", 
                                                  "Int Waters");
  console.log(person1.name);
  console.log(person1.age);
  console.log(person1.address);

  console.log(person2.name);
  console.log(person2.age);
  console.log(person2.address);
  
  console.log(person3.name);
  console.log(person3.age);
  console.log(person3.address);

  //Array of objects
  const fruits = [{name: "apple", color: "red", calories: 95}, 
                {name: "orange", color: "orange", calories: 45},
                {name: "banana", color: "yellow", calories: 105},
                {name: "coconut", color: "white", calories: 195},
                {name: "pineapple", color: "yellow", calories: 37}];
                console.log(fruits[0].name);
                console.log(fruits[0].color);
                console.log(fruits[0].calories);

                console.log(fruits[1].name);
                console.log(fruits[1].color);
                console.log(fruits[1].calories);

                console.log(fruits[2].name);
                console.log(fruits[2].color);
                console.log(fruits[2].calories);

const fruits = [{name: "apple", color: "red", calories: 95}, 
                {name: "orange", color: "orange", calories: 45},
                {name: "banana", color: "yellow", calories: 105},
                {name: "coconut", color: "white", calories: 195},
                {name: "pineapple", color: "yellow", calories: 37}];
               
fruits.push({name:"grapes", color:"purple", calories: 62});

console.log(fruits);

//For Each
const fruits = [{name: "apple", color:"red", calories: 95},
    {name: "orange", color:"orange", calories: 45},
    {name: "banana", color:"yellow", calories: 105},
    {name: "coconut", color:"white", calories: 159},
    {name: "pineapple", color:"yellow", calories: 37},
];

fruits.forEach(fruit => console.log(fruit.name));
fruits.forEach(fruit => console.log(fruit.color));
fruits.forEach(fruit => console.log(fruit.calories));

//map
const fruits = [{name: "apple", color:"red", calories: 95},
    {name: "orange", color:"orange", calories: 45},
    {name: "banana", color:"yellow", calories: 105},
    {name: "coconut", color:"white", calories: 159},
    {name: "pineapple", color:"yellow", calories: 37},
];
const fruitNames = fruits.map(fruit => fruit.name);
const fruitColors = fruits.map(fruit => fruit.color);
const fruitCalories = fruits.map(fruit => fruit.calories);

console.log(fruitNames);
console.log(fruitColors);
console.log(fruitCalories);

//filter
const fruits = [{name: "apple", color:"red", calories: 95},
    {name: "orange", color:"orange", calories: 45},
    {name: "banana", color:"yellow", calories: 105},
    {name: "coconut", color:"white", calories: 159},
    {name: "pineapple", color:"yellow", calories: 37},
];

const yellowFruits = fruits.filter(fruit => fruit.color === "yellow");
const lowCalFruit = fruits.filter(fruit => fruit.calories < 100);
const highCalFruit = fruits.filter(fruit => fruit.calories > 100);

console.log(highCalFruit);
console.log(lowCalFruit);
console.log(yellowFruits);

//reduce
const fruits = [{name: "apple", color:"red", calories: 95},
    {name: "orange", color:"orange", calories: 45},
    {name: "banana", color:"yellow", calories: 105},
    {name: "coconut", color:"white", calories: 159},
    {name: "pineapple", color:"yellow", calories: 37},
];

const maxFruit = fruits.reduce((max, fruit) =>
                             fruit.calories >max.calories ?
fruit : max);

const minFruit = fruits.reduce((min, fruit) =>
    fruit.calories <min.calories ?
fruit : min);


console.log(maxFruit);
console.log(minFruit);

//sort()
method is used to sort elements of an array in place
sorts elements as strings in lexicographical order 
lexicographic = (alphabet + numbers + symbols) as strings
let fruits = ["apple", "orange", "banana", "coconut", "pineapple"];

fruits.sort();

console.log(fruits);

let numbers = [1, 2, 3, 4, 5, 6, 7, 8];

numbers.sort();

console.log(numbers);


let numbers = [1, 10, 2, 9,  3, 8, 4, 7, 5, 6];

numbers.sort((a,b) => a - b);

console.log(numbers);

const people = [{name: "Spongebob", age: 30, gpa: 3.0},
    {name: "Patrick", age: 37, gpa:1.5},
    {name: "Squidward", age: 51, gpa:2.5},
    {name: "Sandy", age: 27, gpa:4.0}]

    people.sort((a,b) => a.age - b.age);

    console.log(people);

    const people = [{name: "Spongebob", age: 30, gpa: 3.0},
    {name: "Patrick", age: 37, gpa:1.5},
    {name: "Squidward", age: 51, gpa:2.5},
    {name: "Sandy", age: 27, gpa:4.0}]

    people.sort((a,b) => a.name.localeCompare(b.name));

    console.log(people);

    //shuffle an array
    const cards = ['A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K'];

function shuffle(array){
   for(let i = array.length -1; i > 0; i--){
     const random = Math.floor(Math.random() * (i + 1));
     
     [array[i], array[random]] = [array[random], array[i]];
   }
}
console.log(cards);
shuffle(cards);

//Getters and setters
getter = special method that makes a property readable
setter = special method that makes a property writable
//validate and modify a value when reading/writing a property

class Rectangle{
    constructor(width, height){
        this.width = width;
        this.height = height;
    }

    set width(newWidth){
     if(newWidth>0){
        this._width = newWidth;
     }
     else{
        console.error("Width must be a positive number");
     }
    }
    set height(newHeight){
        if(newHeight>0){
           this._height= newHeight;
        }
        else{
           console.error("Height must be a positive number");
        }
       }

       get width(){
        return  `${this._width.toFixed(1)}cm`;
       }
       get height(){
        return `${this._height.toFixed(1)}cm`;
       }
       get area(){
        return `${this._width * this._height.toFixed(1)}cm^2`;
       }
}
const rectangle = new Rectangle(3, 4);

rectangle.width = 5;
rectangle.height = 6;

console.log(rectangle.width);
console.log(rectangle.height);
console.log(rectangle.area);

class Person{
    constructor(firstName, lastName, age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }
    set firstName(newFirstName){
        if(typeof newFirstName === "string" && newFirstName.length > 0){
            this._firstName = newFirstName;
        }
        else{
            console.error("First name must be a non-empty string");
        }

    }
    set lastName(newLastName){
        if(typeof newLastName === "string" && newLastName.length > 0){
            this._lastName = newLastName;
        }
        else{
            console.error("Last name must be a non-empty string");
        }
}
set age(newAge){
    if(typeof newAge === "number" && newAge >= 0){
     this._age = newAge;
    }
else{
    console.error("Age must be a non negative number");
        }
      }


   get firstName(){
    return this._firstName;
   }
   get firstName(){
    return this._lastName;
   }
   get fullName(){
    return this._firstName + " " + this._lastName;
   }
   get age(){
    return this._age;
   }
}


const person = new Person("Spongebob", "Squarepants", 30);

console.log(person.firstName);
console.log(person.lastName);
console.log(person.fullName)
console.log(person.age);

//Math objects
built in object that provides a collection of properties and methods
Math.floor(x);
Math.round(x);
Math.ceil(x);
Math.pow(x, y);
Math.sqrt(x);
Math.log(x);
Math.sin(x);
Math.cos(x);
Math.tan(x);
Math.abs(x);
Math.sign(x);
Math.min(x,y,z);
Math.max(x,y,z);

//checked property
property that determines the checked state of an HTML checkbox or radio button element

//string slicing
creating a substring from a portion of another string
string.slice(start, end)

//method chaining
Calling one method after another in a continuous line of the code

//No method chaining
let username = window.prompt("Enter your username");

username = username.trim();
let letter = username.charAt(0);
letter = letter.toUpperCase();

let extraChars = username.slice(1);
extraChars = extraChars.toLowerCase();
username = letter + extraChars;

console.log(username);

//method chaining
let username = window.prompt("Enter your username");

username = username.trim().charAt(0).toUpperCase() + username.trim().slice(1).toLowerCase();

console.log(username);

//do while loop
let loggedIn = true;
let username;
let password;

do{
    username = window.prompt(`Enter your username`);
    password = window.prompt(`Enter your password`);

    if(username === "myUserName" && password==="myPassword"){
    loggedIn = true;
    console.log("You are logged in");
    }
    else{
        console.log("Invalid password! please try again");
    }
}while(!loggedIn)


//while loop
let loggedIn = true;
let username;
let password;

while(!loggedIn){
    username = window.prompt(`Enter your username`);
    password = window.prompt(`Enter your password`);

    if(username === "myUserName" && password==="myPassword"){
    loggedIn = true;
    console.log("You are logged in");
    }
    else{
        console.log("Invalid password! please try again");
    }
}
//variable scope
//global scope
let x = 3;
function function1(){
    console.log(x);
}
function function2(){
    console.log(x);
}
function2();

//local scope

function function1(){
    let x = 1;
    console.log(x);
}
function function2(){
    let x = 2;
    console.log(x);
}
function2();

//ES6 MODULES
index.js
import {PI, getCircumference, getArea, getVolume} from './mathUtil.js';

console.log(PI);
const circumference = getCircumference(10);
const area = getArea(10);
const volume = getVolume(10);

console.log(`${circumference.toFixed(2)}cm`);
console.log(`${area.toFixed(2)}cm^2`);
console.log(`${volume.toFixed(2)}cm^3`);

//MathUtil.js
export const PI = 3.14159;

export function getCircumference(radius){
    return 2 * PI * radius;
}
export function getArea(radius){
    return PI * radius * radius;
}
export function getVolume(radius){
    return 4 * PI * radius * radius;
}
//Error Handling
An Object that is created to represent a problem that occurs often with user input or establishing a connection
try{} Encloses code that might potentially cause an error
catch{} Catch and Handle any thrown Errors from try{}
finally{} optional Always Executes Used mostly for clean up 
close files, close connections, release resources
 try{
const dividend = Number(window.prompt("Enter a dividend:"));
const divisor = Number(window.prompt("Enter a divisor: "));

if(divisor=== 0){
    throw new Error("You can't divide by zero!");
}
if(isNaN(dividend) || isNaN(divisor)){
    throw new Error("Values must be a number");
}
const result = dividend / divisor;
console.lag(result);
}
catch(error){
    console.error(error);
}
console.log("You have reached the end")

//Class list
Element property in JavaScript used to interact with an elements list of classes (CSS classes)
Allows you to make reusable classes for many elements 
//add()
//remove()
//toggle(Remove if present, Add if not)
//Replace(oldClass, newClass)
//contains()

//Node list
Static collection of HTML elements by (id, class, element)
Can be Created by using querySelectorAll()
Similar to an array but no map , filter, reduce
Nodelist won't update to automatically reflect changes

//sliders
const slides = document.querySelectorAll(".slides img");
let slideIndex = 0;
let intervalId = null;

//initializeSlider();
document.addEventListener("DOMContentLoaded", initializeSlider);

function initializeSlider(){
 if(slides.length > 0){
    slides[slideIndex].classList.add("displaySlide");
    intervalId = setInterval(nextSlide, 5000);
 }
}
function showSlide(index){

    if(index >= slides.length){
      slideIndex = 0;
    }
    else if(index < 0){
    slideIndex = slides.length -1;
    }

 slides.forEach(slide => {
    slide.classList.remove("displaySlide");
 });
 slides[slideIndex].classList.add("displaySlide");
}
function prevSlide(){
clearInterval(intervalId);
  slideIndex--;
  showSlide(slideIndex);
}
function nextSlide(){
  slideIndex++;
  showSlide(slideIndex);
}

//fetch
function used for making HTTP requests to fetch resources
//simplifies asynchronous data fetching in javascript and used for interacting with API'S to retrieve and send data asynchronously 
//Fetch url {method: }
fetchData();
async function fetchData(){

    try{

    const pokemonName = document.getElementById("pokemonName").value.toLowerCase();
     const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonName}`);
      if(!response.ok){
        throw new Error("Could not fetch resource");
      }
      const data = await response.json();
      const pokemonSprite = data.sprites.front_default;
      const imgElement = document.getElementById("pokemonSprite");

      imgElement.src = pokemonSprite;
      imgElement.style.display = "block";
    }
    catch(error){
        console.error(error);
    }
}

//HTML

    <input type="text" id="pokemonName" placeholder="Enter Pokemon Name">
    <button onclick="fetchData()">Fetch Pokemon</button>

    <img src="" alt="Pokemon Sprite" id="pokemonSprite" style="display: none">
      
//Hide and Show HTML
 <button id="myButton">Hide</button><br>

    <img id="myImg" src="./image1.png" width="400px">

    const myButton = document.getElementById("myButton");
const myImg = document.getElementById("myImg");

myButton.addEventListener("click", event => {
   if( myImg.style.visibility === "hidden"){
    myImg.style.visibility = "visible";
    myButton.textContent = "Hide";
   }
  else{
    myImg.style.visibility = "hidden";
    myButton.textContent = "Show";
  }
  
});

//And And Change HTML elements
//STEP 1 CREATE THE ELEMENT
const newListItem = document.createElement("li");


//STEP 2 ADD ATTRIBUTES AND PROPERTIES
newListItem.textContent = "coconut";
newListItem.id = "coconut";
newListItem.style.fontWeight = "bold";
newListItem.style.backgroundColor = "lightgreen";

//STEP 3 APPEND ELEMENT TO DOM
//document.body.append(newListItem);
//document.body.prepend(newListItem);
ocument.getElementById("fruits").append(newListItem);
//document.getElementById("fruits").append(newListItem);
//const banana = document.getElementById("banana");
//document.getElementById("fruits").insertBefore(newListItem, banana);
//document.body.append(newH1);
//document.body.prepend(newH1);
//document.getElementById("box1").append(newH1);
//document.getElementById("box1").prepend(newH1);

//const box2 = document.getElementById("box2");
//document.body.insertBefore(newH1, box2);

//const boxes = document.querySelectorAll(".box");
//document.body.insertBefore(newH1, boxes);

//const listItems = document.querySelectorAll("#fruits li");
//document.getElementById("fruits").insertBefore(newListItem, listItems[4]);
//REMOVE HTML ELEMENT

document.getElementById("fruits").removeChild(newListItem);

//event listener = Listen for specific events to create interactive web pages
events: click, mouseover, mouseout
.addEventListener(event callback)
//press event
const myBox = document.getElementById("myBox");
const moveAmount = 10;
let x = 0;
let y = 0;

document.addEventListener("keydown", event => {
    myBox.textContent = "😆";
    myBox.style.backgroundColor = "tomato";
});
document.addEventListener("keyuo", event => {
    myBox.textContent = "😆";
    myBox.style.backgroundColor = "lightblue";
});

document.addEventListener("keydown", event =>{
  if(event.key.startsWith("Arrow")){

     event.preventDefault();

    switch(event.key){
    case "ArrowUp":
    y -= moveAmount;
    break;
    case "ArrowDown":
    y += moveAmount;
    break;
    case "ArrowLeft":
    x -= moveAmount;
    break;
    case "ArrowRight":
    x += moveAmount;
     break;
    }
   
    myBox.style.top = `${y}px`;
    myBox.style.left = `${x}px`;
  }
});

//element selectors = Methods used to target and manipulate HTML elements
They allow one to select one or multiple HTML elements from the DOM(Document Object Model)

1. document.getElementById() //ELEMENT OR null
2. document.getElementByClassName() //HTML collection
3. document.getElementsByTagName() //HTML collection
4. document.querySelector() //ELEMENT OR null
5. document.querySelectorAll() //node list

//DOM Navigation
The process of navigating through the structure of an HTML document using javascript

//.firstElementChild
//.lastElementChild
//.nextElementSibling
//.previousElementSibling
//.parentElement
//.children

//FIRST ELEMENT CHILD
//const element = document.getElementById("desert");
//const firstChild = element.firstElementChild;
//firstChild.style.background = "yellow";

//const ulElements = document.querySelectorAll("ul");
//ulElements.forEach(ulElement => {
  //const firstChild = ulElement.firstElementChild;
  // firstChild.style.backgroundColor = "purple";
//});

//LAST ELEMENT CHILD
//const element = document.getElementById("fruits");
//const lastChild = element.lastElementChild;
//lastChild.style.backgroundColor = "aqua";

//const ulElements = document.querySelectorAll("ul");
//ulElements.forEach(ulElement => {
   // const lastChild = ulElement.lastElementChild;
   // lastChild.style.backgroundColor = "pink";
//});

//NEXT ELEMENT SIBLING
//const element = document.getElementById("Apple");
//const nextSibling = element.nextElementSibling;
//nextSibling.style.backgroundColor = "aqua";

//const element = document.getElementById("fruits");
//const nextSibling = element.nextElementSibling;
//nextSibling.style.backgroundColor = "indigo";

//PREVIOUS ELEMENT SIBLING
//const element = document.getElementById("Orange");
//const prevSibling = element.previousElementSibling;
//prevSibling.style.backgroundColor = "indigo";
//const element = document.getElementById("vegetables");
///const prevSibling = element.previousElementSibling;
//prevSibling.style.backgroundColor = "aqua";

//ParentElement
//const element = document.getElementById("Apple");
//const parent = element.parentElement;
//parent.style.backgroundColor = "green";

//children
//const element = document.getElementById("fruits");
//const children = element.children;

//Array.from(children).forEach(child => {
  //  child.style.backgroundColor = "violet";
//});

//const element = document.getElementById("fruits");
//const children = element.children;

//children[1].style.backgroundColor = "pink";

//cookie = a small text file stored on your computer used to remember information about the user saved in name=value pairs 

const firstText = document.querySelector("#firstText");
const lastText = document.querySelector("#lastText");
const submitBtn = document.querySelector("#submitBtn");
const cookieBtn = document.querySelector("#cookieBtn");

submitBtn.addEventListener("click", () => {
    setCookie("firstName", firstText.value, 365);
    setCookie("lastName", lastText.value, 365);
});
cookieBtn.addEventListener("click", () => {
    firstText.value = getCookie("firstName");
    lastText.value = getCookie("lastName");
});

function setCookie(name, value, daysToLive){
    const date = new Date();
    date.setTime(date.getTime() +  (daysToLive * 24 * 60 * 60 * 1000));
    let expires = "expires=" + date.toUTCString();
    document.cookie = `${name}=${value}; ${expires}; path=/`
}
function deleteCookie(name){
    setCookie(name, null, null);
}
function getCookie(name){
    const cDecoded = decodeURIComponent(document.cookie);
    const cArray = cDecoded.split("; ");
    let result = null;
    
    cArray.forEach(element => {
        if(element.indexOf(name) == 0){
            result = element.substring(name.length + 1)
        }
    })
    return result;
}

//HTML
    <label for="firstText">first name:</label>
    <input id="firstText"><br>
    <label for="lastText">last name:</label>
    <input id="lastText"><br>
    <button id="submitBtn">submit</button>
    <button id="cookieBtn">get cookies</button>

    //Document Object Model
    document.title
    document.body.style.backgroundColor = "";
    console.dir(document);

    //forms
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <form action="action_page.php" method="POST">

        <div>
            <label for="fname">first name:</label>
            <input type="text" id="fname" name="fname" placeholder="Spongebob" required>
        </div>

        <br>

        <div>
            <label for="lname">last name:</label>
            <input type="text" id="lname" name="lname" placeholder="Squarepants" required>
        </div>

        <br>

        <div>
            <label for="pass">password:</label>
            <input type="password" id="pass" name="pass" maxlength="12" required>
        </div>

        <br>

        <div>
            <label for="email">email:</label>
            <input type="email" id="email" name="email" placeholder="SPants@gmail.com">
        </div>

        <br>

        <div>
            <label for="phone">phone #:</label>
            <input type="tel" id="phone" name="phone" placeholder="(123)-456-7890">
        </div>

        <br>

        <div>
            <label for="bdate">birthdate:</label>
            <input type="date" id="bdate" name="bdate">
        </div>
        
        <br>

        <div>
            <label for="quantity">quantity:</label>
            <input type="number" id="quantity" name="quantity" min="0" max="99" value="1">
        </div>
        
        <br>

        <div>
            <label for="title">title:</label>

            <label for="Mr.">Mr.</label>
            <input type="radio" id="Mr." name="title" value="Mr.">

            <label for="Mrs.">Mrs.</label>
            <input type="radio" id="Mrs." name="title" value="Mrs.">

            <label for="PhD.">PhD.</label>
            <input type="radio" id="PhD." name="title" value="PhD.">
        </div>
        
        <br>

        <div>
            <label for="payment">payment:</label>
            <select id="payment" name="payment">
                <option value="visa">visa</option>
                <option value="mastercard">mastercard</option>
                <option value="giftcard">giftcard</option>
            </select>
        </div>
        
        <br>

        <div>
            <label for="subscribe">subscribe:</label>
            <input type="checkbox" id="subscribe" name="subscribe" min="0" max="99" value="1">
        </div>
        
        <br>

        <div>
            <input type="reset">
        </div>

        <br>

        <div>
            <input type="submit">
        </div>

    </form>
</body>
<script src="index.js"></script>
</html>

//